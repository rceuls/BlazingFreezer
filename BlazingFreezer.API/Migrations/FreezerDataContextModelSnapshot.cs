// <auto-generated />
using System;
using BlazingFreezer.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BlazingFreezer.API.Migrations
{
    [DbContext(typeof(FreezerDataContext))]
    partial class FreezerDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BlazingFreezer.API.Models.Freezer", b =>
                {
                    b.Property<int>("FreezerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("FreezerId");

                    b.ToTable("Freezers");

                    b.HasData(
                        new
                        {
                            FreezerId = 1,
                            Name = "Keuken"
                        },
                        new
                        {
                            FreezerId = 2,
                            Name = "Garage"
                        });
                });

            modelBuilder.Entity("BlazingFreezer.API.Models.FreezerDrawer", b =>
                {
                    b.Property<int>("FreezerDrawerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FreezerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("FreezerDrawerId");

                    b.HasIndex("FreezerId");

                    b.ToTable("FreezerDrawer");

                    b.HasData(
                        new
                        {
                            FreezerDrawerId = 1,
                            FreezerId = 1,
                            Name = "Bovenaan"
                        },
                        new
                        {
                            FreezerDrawerId = 2,
                            FreezerId = 1,
                            Name = "Onderaan"
                        },
                        new
                        {
                            FreezerDrawerId = 3,
                            FreezerId = 2,
                            Name = "Schuif 1"
                        },
                        new
                        {
                            FreezerDrawerId = 4,
                            FreezerId = 2,
                            Name = "Schuif 2"
                        },
                        new
                        {
                            FreezerDrawerId = 5,
                            FreezerId = 2,
                            Name = "Schuif 3"
                        },
                        new
                        {
                            FreezerDrawerId = 6,
                            FreezerId = 2,
                            Name = "Schuif 4"
                        },
                        new
                        {
                            FreezerDrawerId = 7,
                            FreezerId = 2,
                            Name = "Schuif 5"
                        },
                        new
                        {
                            FreezerDrawerId = 8,
                            FreezerId = 2,
                            Name = "Schuif 6"
                        },
                        new
                        {
                            FreezerDrawerId = 9,
                            FreezerId = 2,
                            Name = "Schuif 7"
                        });
                });

            modelBuilder.Entity("BlazingFreezer.API.Models.FreezerItem", b =>
                {
                    b.Property<int>("FreezerItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FreezerDrawerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVacuum")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("Since")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("FreezerItemId");

                    b.HasIndex("FreezerDrawerId");

                    b.ToTable("FreezerItem");

                    b.HasData(
                        new
                        {
                            FreezerItemId = 1,
                            FreezerDrawerId = 1,
                            IsVacuum = true,
                            Name = "potato",
                            Since = new DateTime(2020, 6, 18, 20, 43, 44, 862, DateTimeKind.Local).AddTicks(2492)
                        },
                        new
                        {
                            FreezerItemId = 2,
                            FreezerDrawerId = 1,
                            IsVacuum = true,
                            Name = "sausage",
                            Since = new DateTime(2020, 6, 18, 20, 43, 44, 866, DateTimeKind.Local).AddTicks(6956)
                        },
                        new
                        {
                            FreezerItemId = 3,
                            FreezerDrawerId = 3,
                            IsVacuum = false,
                            Name = "spaghetti batch 1",
                            Since = new DateTime(2020, 6, 23, 20, 43, 44, 866, DateTimeKind.Local).AddTicks(7070)
                        },
                        new
                        {
                            FreezerItemId = 4,
                            FreezerDrawerId = 3,
                            IsVacuum = false,
                            Name = "spaghetti batch 2",
                            Since = new DateTime(2020, 6, 23, 20, 43, 44, 866, DateTimeKind.Local).AddTicks(7101)
                        },
                        new
                        {
                            FreezerItemId = 5,
                            FreezerDrawerId = 3,
                            IsVacuum = false,
                            Name = "spaghetti batch 3",
                            Since = new DateTime(2020, 6, 23, 20, 43, 44, 866, DateTimeKind.Local).AddTicks(7127)
                        });
                });

            modelBuilder.Entity("BlazingFreezer.API.Models.FreezerDrawer", b =>
                {
                    b.HasOne("BlazingFreezer.API.Models.Freezer", null)
                        .WithMany("FreezerDrawers")
                        .HasForeignKey("FreezerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazingFreezer.API.Models.FreezerItem", b =>
                {
                    b.HasOne("BlazingFreezer.API.Models.FreezerDrawer", null)
                        .WithMany("FreezerItems")
                        .HasForeignKey("FreezerDrawerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
